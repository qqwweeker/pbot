#–º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ª–µ–≥—Ä–∞–º–∞
from telegram import Update
from telegram.ext import ContextTypes
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self, api_client):
        self.api_client = api_client
        self.system_prompt = """–¢—ã —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ Telegram. –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
1. –ó–∞–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è (–∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞)
2. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ–ø–æ–ª–Ω—ã–π, —É—Ç–æ—á–Ω–∏ –µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
3. –ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = """
        –ü—Ä–∏–≤–µ—Ç! üëã –Ø —É–º–Ω—ã–π –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ DeepSeek.  

        –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:  
        - –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å —É—á—ë—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞  
        - –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)  
        - –û—á–∏—â–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥–æ–π /clear   

        –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!  
        """
        await update.message.reply_text(welcome_text)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_message = update.message.text
        
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        if 'chat_history' not in context.user_data:
            context.user_data['chat_history'] = []
        
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        context.user_data['chat_history'].append({
            "role": "user",
            "content": user_message,
            "timestamp": datetime.now().isoformat()
        })
        
        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏—Å—Ç–æ—Ä–∏—é
        messages = [
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
            *context.user_data['chat_history'][-5:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–ø–ª–∏–∫
        ]
        
        # –∑–∞–ø—Ä–æ—Å API
        response = self.api_client.get_response(messages)
        
        #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        context.user_data['chat_history'].append({
            "role": "assistant",
            "content": response,
            "timestamp": datetime.now().isoformat()
        })
        
        # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        context.user_data['chat_history'] = context.user_data['chat_history'][-10:]
        
        response = response.replace("###", "").replace("#", "")
        await update.message.reply_text(response, parse_mode="Markdown")

    async def clear_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if 'chat_history' in context.user_data:
            del context.user_data['chat_history']
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞!")